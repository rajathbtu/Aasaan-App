name: Build Android and iOS artifacts

on:
  push:
    branches: ["**"]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android:
    name: Android APK & AAB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm install --no-audit --prefer-offline

      - name: Expo prebuild (Android)
        env:
          EXPO_NO_TELEMETRY: "1"
          CI: "1"
        run: npx expo prebuild --platform android --non-interactive

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Debug APK (assembleDebug)
        run: |
          cd android
          ./gradlew --no-daemon assembleDebug

      - name: Build Release APK (assembleRelease)
        run: |
          cd android
          ./gradlew --no-daemon assembleRelease

      - name: Build Release AAB (bundleRelease)
        run: |
          cd android
          ./gradlew --no-daemon bundleRelease

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: frontend/android/app/build/outputs/apk/debug/*.apk

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: frontend/android/app/build/outputs/apk/release/*.apk

      - name: Upload Release AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: frontend/android/app/build/outputs/bundle/release/*.aab

  ios-simulator:
    name: iOS Simulator .app (no signing)
    runs-on: macos-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm install --no-audit --prefer-offline

      - name: Expo prebuild (iOS)
        env:
          EXPO_NO_TELEMETRY: "1"
          CI: "1"
        run: npx expo prebuild --platform ios --non-interactive

      - name: Install CocoaPods
        run: npx pod-install ios

      - name: Install xcpretty
        run: sudo gem install xcpretty

      - name: Determine iOS scheme/name
        id: iosvars
        shell: bash
        run: |
          APP_NAME=$(node -p "require('./app.json').expo.name.replace(/[^a-zA-Z0-9]/g,'')")
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Build .app for iOS Simulator
        env:
          APP_NAME: ${{ steps.iosvars.outputs.app_name }}
        run: |
          xcodebuild \
            -workspace ios/${APP_NAME}.xcworkspace \
            -scheme ${APP_NAME} \
            -configuration Release \
            -sdk iphonesimulator \
            -derivedDataPath ios/build \
            build | xcpretty
          cd ios/build/Build/Products/Release-iphonesimulator
          zip -r ${APP_NAME}-simulator.zip ${APP_NAME}.app

      - name: Upload iOS Simulator artifact (.app zipped)
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: frontend/ios/build/Build/Products/Release-iphonesimulator/*-simulator.zip

  ios-ipa:
    name: iOS .ipa (requires signing secrets)
    runs-on: macos-latest
    needs: ios-simulator
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check signing secrets
        id: has_signing
        shell: bash
        run: |
          if [ -n "${{ secrets.IOS_CERT_P12_BASE64 }}" ] && \
             [ -n "${{ secrets.IOS_CERT_PASSWORD }}" ] && \
             [ -n "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" ] && \
             [ -n "${{ secrets.IOS_TEAM_ID }}" ] && \
             [ -n "${{ secrets.IOS_BUNDLE_IDENTIFIER }}" ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip IPA build (secrets missing)
        if: steps.has_signing.outputs.present != 'true'
        run: echo "iOS signing secrets not configured; skipping IPA build."

      - name: Setup Node.js
        if: steps.has_signing.outputs.present == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        if: steps.has_signing.outputs.present == 'true'
        run: npm install --no-audit --prefer-offline

      - name: Expo prebuild (iOS)
        if: steps.has_signing.outputs.present == 'true'
        env:
          EXPO_NO_TELEMETRY: "1"
          CI: "1"
        run: npx expo prebuild --platform ios --non-interactive

      - name: Install CocoaPods
        if: steps.has_signing.outputs.present == 'true'
        run: npx pod-install ios

      - name: Install xcpretty
        if: steps.has_signing.outputs.present == 'true'
        run: sudo gem install xcpretty

      - name: Determine iOS scheme/name
        if: steps.has_signing.outputs.present == 'true'
        id: iosvars
        shell: bash
        run: |
          APP_NAME=$(node -p "require('./app.json').expo.name.replace(/[^a-zA-Z0-9]/g,'')")
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Import signing certificates and profiles
        if: steps.has_signing.outputs.present == 'true'
        id: sign
        shell: bash
        env:
          P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p $HOME/signing
          echo "$P12_BASE64" | base64 --decode > $HOME/signing/cert.p12
          echo "$PROFILE_BASE64" | base64 --decode > $HOME/signing/profile.mobileprovision

          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import $HOME/signing/cert.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_UUID=$(security cms -D -i $HOME/signing/profile.mobileprovision | /usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin)
          PROFILE_NAME=$(security cms -D -i $HOME/signing/profile.mobileprovision | /usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin)
          cp $HOME/signing/profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "profile_uuid=$PROFILE_UUID" >> $GITHUB_OUTPUT
          echo "profile_name=$PROFILE_NAME" >> $GITHUB_OUTPUT

      - name: Archive app
        if: steps.has_signing.outputs.present == 'true'
        env:
          APP_NAME: ${{ steps.iosvars.outputs.app_name }}
          BUNDLE_ID: ${{ secrets.IOS_BUNDLE_IDENTIFIER }}
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
          PROFILE_NAME: ${{ steps.sign.outputs.profile_name }}
        run: |
          xcodebuild \
            -workspace ios/${APP_NAME}.xcworkspace \
            -scheme ${APP_NAME} \
            -configuration Release \
            -archivePath ios/build/${APP_NAME}.xcarchive \
            PRODUCT_BUNDLE_IDENTIFIER=${BUNDLE_ID} \
            DEVELOPMENT_TEAM=${TEAM_ID} \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Development" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME}" \
            archive | xcpretty

      - name: Create export options
        if: steps.has_signing.outputs.present == 'true'
        env:
          BUNDLE_ID: ${{ secrets.IOS_BUNDLE_IDENTIFIER }}
        run: |
          PROFILE_NAME=$(security cms -D -i $HOME/signing/profile.mobileprovision | /usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin)
          cat > ios/exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>method</key><string>development</string>
            <key>signingStyle</key><string>manual</string>
            <key>signingCertificate</key><string>Apple Development</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>teamID</key><string>${{ secrets.IOS_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF

      - name: Export .ipa
        if: steps.has_signing.outputs.present == 'true'
        env:
          APP_NAME: ${{ steps.iosvars.outputs.app_name }}
        run: |
          xcodebuild -exportArchive \
            -archivePath ios/build/${APP_NAME}.xcarchive \
            -exportPath ios/build/export \
            -exportOptionsPlist ios/exportOptions.plist | xcpretty

      - name: Upload iOS .ipa artifact
        if: steps.has_signing.outputs.present == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: frontend/ios/build/export/*.ipa
