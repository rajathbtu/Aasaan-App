name: CI – Web Deploy and Mobile Builds

on:
  push:
    branches:
      - '**' # run on all branches; web deploy job will run only on main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  web-deploy:
    name: Build and Deploy Aasaan Web
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Build Expo Web
        working-directory: frontend
        env:
          EXPO_NO_TELEMETRY: 1
          CI: true
        run: |
          npx expo export --platform web --non-interactive
          cp dist/index.html dist/404.html
          touch dist/.nojekyll
          echo "m.aasaanapp.in" > dist/CNAME

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: frontend/dist

  android:
    name: Android APK & AAB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm install --no-audit --prefer-offline

      - name: Restore Firebase configuration files (Android)
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          # Restore google-services.json to project root as configured in app.json (./google-services.json)
          if [ -z "$GOOGLE_SERVICES_JSON" ]; then
            echo "❌ GOOGLE_SERVICES_JSON secret not found" && exit 1
          fi
          node -e "const fs=require('fs'); const s=(process.env.GOOGLE_SERVICES_JSON||'').replace(/\\s+/g,''); if(!s){console.error('Secret empty'); process.exit(1);} fs.writeFileSync('google-services.json', Buffer.from(s,'base64'));"
          echo "✅ Restored google-services.json at project root" && ls -la google-services.json

      - name: Expo prebuild (Android)
        env:
          EXPO_NO_TELEMETRY: '1'
          CI: '1'
        run: npx expo prebuild --platform android

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Debug APK (assembleDebug)
        run: |
          cd android
          ./gradlew --no-daemon assembleDebug

      - name: Build Release APK (assembleRelease)
        run: |
          cd android
          ./gradlew --no-daemon assembleRelease

      - name: Build Release AAB (bundleRelease)
        run: |
          cd android
          ./gradlew --no-daemon bundleRelease

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: frontend/android/app/build/outputs/apk/debug/*.apk

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: frontend/android/app/build/outputs/apk/release/*.apk

      - name: Upload Release AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: frontend/android/app/build/outputs/bundle/release/*.aab

  ios-simulator:
    name: iOS Simulator .app (no signing)
    runs-on: macos-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm install --no-audit --prefer-offline

      - name: Restore Firebase configuration files (iOS)
        env:
          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          # Restore GoogleService-Info.plist to project root as configured in app.json (./GoogleService-Info.plist)
          if [ -z "$GOOGLE_SERVICE_INFO_PLIST" ]; then
            echo "❌ GOOGLE_SERVICE_INFO_PLIST secret not found" && exit 1
          fi
          node -e "const fs=require('fs'); const s=(process.env.GOOGLE_SERVICE_INFO_PLIST||'').replace(/\\s+/g,''); if(!s){console.error('Secret empty'); process.exit(1);} fs.writeFileSync('GoogleService-Info.plist', Buffer.from(s,'base64'));"
          echo "✅ Restored GoogleService-Info.plist at project root" && ls -la GoogleService-Info.plist

      - name: Expo prebuild (iOS)
        env:
          EXPO_NO_TELEMETRY: '1'
          CI: '1'
        run: npx expo prebuild --platform ios

      - name: Ensure Podfile uses modular headers
        run: |
          PODFILE=ios/Podfile
          echo "📄 Checking Podfile at $PODFILE"
          if [ ! -f "$PODFILE" ]; then
            echo "❌ Podfile not found at $PODFILE" && ls -la ios && exit 1
          fi
          if grep -q "use_modular_headers!" "$PODFILE"; then
            echo "ℹ️ Podfile already contains use_modular_headers!"
          else
            echo "🔧 Prepending use_modular_headers! to Podfile"
            tmpfile=$(mktemp)
            { echo "# Enable modular headers for Firebase Swift pods"; echo "use_modular_headers!"; echo; cat "$PODFILE"; } > "$tmpfile"
            mv "$tmpfile" "$PODFILE"
          fi
          echo "--- Podfile preview (top 60 lines) ---"
          head -n 60 "$PODFILE"

      - name: Install CocoaPods
        run: npx pod-install ios

      - name: Install xcpretty
        run: sudo gem install xcpretty

      - name: Determine iOS scheme/name
        id: iosvars
        shell: bash
        run: |
          APP_NAME=$(node -p "require('./app.json').expo.name.replace(/[^a-zA-Z0-9]/g,'')")
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Build .app for iOS Simulator
        env:
          APP_NAME: ${{ steps.iosvars.outputs.app_name }}
        run: |
          xcodebuild \
            -workspace ios/${APP_NAME}.xcworkspace \
            -scheme ${APP_NAME} \
            -configuration Release \
            -sdk iphonesimulator \
            -derivedDataPath ios/build \
            build | xcpretty
          cd ios/build/Build/Products/Release-iphonesimulator
          zip -r ${APP_NAME}-simulator.zip ${APP_NAME}.app

      - name: Upload iOS Simulator artifact (.app zipped)
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: frontend/ios/build/Build/Products/Release-iphonesimulator/*-simulator.zip
