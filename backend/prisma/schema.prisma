generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  phoneNumber         String               @unique
  language            String
  role                Role?
  creditPoints        Int                  @default(0)
  plan                Plan                 @default(free)
  createdAt           DateTime             @default(now())
  avatarUrl           String?
  notifications       Notification[]
  payments            Payment[]            @relation("UserPayments")
  serviceProviderInfo ServiceProviderInfo? @relation("User_ServiceProvider")
  workRequests        WorkRequest[]        @relation("UserWorkRequests")
}

model ServiceProviderInfo {
  id         String    @id @default(uuid())
  services   String[]
  locationId String?   @unique
  radius     Int
  userId     String    @unique
  location   Location? @relation("ServiceProviderLocation", fields: [locationId], references: [id])
  user       User      @relation("User_ServiceProvider", fields: [userId], references: [id])
}

model Location {
  id                  String               @id @default(uuid())
  name                String
  lat                 Float
  lng                 Float
  serviceProviderInfo ServiceProviderInfo? @relation("ServiceProviderLocation")
  workRequest         WorkRequest?         @relation("WorkRequestLocation")
}

model WorkRequest {
  id                String             @id @default(uuid())
  userId            String
  service           String
  locationId        String             @unique
  tags              String[]
  createdAt         DateTime           @default(now())
  status            WorkRequestStatus  @default(active)
  boosted           Boolean            @default(false)
  closedAt          DateTime?
  acceptedProviders AcceptedProvider[]
  rating            Rating?
  location          Location           @relation("WorkRequestLocation", fields: [locationId], references: [id])
  user              User               @relation("UserWorkRequests", fields: [userId], references: [id])
}

model AcceptedProvider {
  id            String      @id @default(uuid())
  providerId    String
  acceptedAt    DateTime    @default(now())
  workRequestId String
  workRequest   WorkRequest @relation(fields: [workRequestId], references: [id])
}

model Rating {
  id            String      @id @default(uuid())
  providerId    String
  stars         Int
  review        String?
  workRequestId String      @unique
  workRequest   WorkRequest @relation(fields: [workRequestId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)
  data      Json?
  user      User             @relation(fields: [userId], references: [id])
}

model Service {
  id       String   @id
  name     String
  category String
  tags     String[]
  color    String
}

model Payment {
  id          String   @id @default(uuid())
  userId      String
  orderId     String   @unique
  paymentId   String?  @unique
  amount      Int
  currency    String   @default("INR")
  status      String   @default("created")
  type        String
  description String?
  notes       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserPayments", fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([type])
}

enum Role {
  endUser
  serviceProvider
}

enum Plan {
  free
  basic
  pro
}

enum WorkRequestStatus {
  active
  closed
}

enum NotificationType {
  newRequest
  requestAccepted
  ratingPrompt
  boostPromotion
  autoClosed
  planPromotion
}
