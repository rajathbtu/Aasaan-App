import React, { useState, useCallback } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  // ScrollView,
  // SafeAreaView, // remove to avoid double safe-area padding with Header
} from 'react-native';
import { useFocusEffect, useNavigation } from '@react-navigation/native';
import { Ionicons } from '@expo/vector-icons';
import { USE_MOCK_API } from '../config';
import * as realApi from '../api';
import * as mockApi from '../api/mock';
import { useAuth } from '../contexts/AuthContext';
import { colors, spacing, radius } from '../theme';
import { useI18n } from '../i18n';
import Header from '../components/Header';

const API = USE_MOCK_API ? mockApi : realApi;

// Relative time helper (localized)
const buildTimeAgo = (t: ReturnType<typeof useI18n>['t']) => (value: any): string => {
  if (!value) return t('common.relative.justNow');
  const d = typeof value === 'string' || typeof value === 'number' ? new Date(value) : value;
  const tms = d?.getTime?.() || 0;
  const diff = Date.now() - tms;
  if (!Number.isFinite(diff) || diff < 0) return t('common.relative.justNow');
  const m = Math.floor(diff / 60000);
  if (m < 1) return t('common.relative.justNow');
  if (m < 60) return t('common.relative.minAgo', { count: m });
  const h = Math.floor(m / 60);
  if (h < 24) return t('common.relative.hourAgo', { count: h });
  const dys = Math.floor(h / 24);
  return t('common.relative.dayAgo', { count: dys });
};

/**
 * Displays inâ€‘app notifications generated by the backend.  Users can
 * mark notifications as read individually or all at once.  Each
 * notification shows a title, a message and an approximate timestamp.
 */

const NotificationsScreen: React.FC = () => {
  const { token } = useAuth();
  const navigation = useNavigation<any>();
  const { t } = useI18n();
  const timeAgo = buildTimeAgo(t);
  const [notifications, setNotifications] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchNotifications = async () => {
    if (!token) return;
    try {
      setLoading(true);
      const list = await API.getNotifications(token);
      setNotifications(list);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useFocusEffect(
    useCallback(() => {
      fetchNotifications();
    }, [token])
  );

  const markAllRead = async () => {
    if (!token) return;
    try {
      await API.markAllNotificationsRead(token);
      fetchNotifications();
    } catch (err) {
      console.error(err);
    }
  };

  const getAccentByType = (type: string) => {
    switch (type) {
      case 'payment':
        return colors.primary;
      case 'success':
        return colors.success;
      case 'warning':
        return colors.warning;
      case 'promo':
        return colors.accent;
      case 'info':
        return colors.grey;
      default:
        return colors.violet; // fallback accent
    }
  };

  const getIconForType = (type: string): keyof typeof Ionicons.glyphMap => {
    switch (type) {
      case 'newRequest':
        return 'notifications';
      case 'requestAccepted':
        return 'checkmark-circle';
      case 'ratingPrompt':
        return 'star';
      case 'boostPromotion':
        return 'flash';
      case 'autoClosed':
        return 'lock-closed';
      case 'planPromotion':
        return 'trophy';
      default:
        return 'information-circle';
    }
  };

  const renderItem = ({ item }: { item: any }) => {
    const accent = getAccentByType(item.type || '');
    const iconName = getIconForType(item.type || '');
    const requestId = item?.data?.requestId || item?.request?.id;
    return (
      <TouchableOpacity
        activeOpacity={0.9}
        onPress={() => {
          if (requestId) {
            navigation.navigate('WorkRequestDetails', { id: requestId });
          }
        }}
        style={[styles.card]}
      >
        {/* Left coloured bar */}
        <View style={[styles.colourBar, { backgroundColor: accent }]} />
        <View style={{ flex: 1 }}>
          <View style={styles.cardHeader}>
            <View style={{ flexDirection: 'row', alignItems: 'center', flex: 1 }}>
              <View style={[styles.iconCircle, { backgroundColor: accent }]}> 
                <Ionicons name={iconName} size={14} color={colors.white} />
              </View>
              <Text style={styles.cardTitle} numberOfLines={1}>{item.title}</Text>
            </View>
            {!item.read && <View style={styles.unreadDot} />}
          </View>
          <Text style={styles.cardMessage}>{item.message}</Text>
          <View style={styles.cardFooter}>
            <Text style={styles.cardTime}>{timeAgo(item.createdAt)}</Text>
            {requestId ? (
              <View style={styles.actionsRow}>
                <TouchableOpacity
                  style={styles.actionButton}
                  onPress={() => navigation.navigate('WorkRequestDetails', { id: requestId })}
                >
                  <Text style={styles.actionButtonText}>{t('notifications.viewDetails')}</Text>
                </TouchableOpacity>
              </View>
            ) : <View />}
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={colors.primary} />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header */}
      <Header
        title={t('notifications.title')}
        showBackButton={true}
        showNotification={false}
        customRightComponent={
          <TouchableOpacity onPress={markAllRead} style={{ paddingHorizontal: spacing.sm, paddingVertical: spacing.xs }}>
            <Text style={styles.markAllText}>{t('notifications.markAllRead')}</Text>
          </TouchableOpacity>
        }
      />
      {/* Small spacer to prevent overlap and keep consistent spacing below header */}
      <View style={{ height: spacing.sm }} />
      <FlatList
        data={notifications}
        keyExtractor={(item) => item.id}
        renderItem={renderItem}
        ListEmptyComponent={<Text style={styles.emptyText}>{t('notifications.empty')}</Text>}
        contentContainerStyle={{ paddingBottom: spacing.xl + 80 }}
        showsVerticalScrollIndicator={false}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.light,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.light,
  },
  markAllText: {
    fontSize: 14,
    color: colors.primary,
  },
  card: {
    flexDirection: 'row',
    padding: spacing.md,
    marginHorizontal: spacing.lg,
    marginBottom: spacing.md,
    borderRadius: radius.md,
    borderWidth: 1,
    borderColor: colors.greyLight,
    backgroundColor: colors.white,
  },
  colourBar: {
    width: 4,
    borderRadius: 2,
    marginRight: spacing.md,
  },
  iconCircle: {
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: spacing.sm,
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  unreadDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: colors.error,
    marginLeft: spacing.sm,
  },
  cardTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.dark,
    flex: 1,
  },
  cardMessage: {
    fontSize: 12,
    color: colors.grey,
    marginBottom: spacing.sm,
  },
  cardFooter: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  cardTime: {
    fontSize: 12,
    color: colors.grey,
  },
  actionsRow: {
    flexDirection: 'row',
  },
  actionButton: {
    backgroundColor: colors.primary,
    borderRadius: radius.md,
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    marginLeft: spacing.sm,
  },
  actionButtonText: {
    fontSize: 12,
    color: colors.white,
    fontWeight: '600',
  },
  emptyText: {
    textAlign: 'center',
    marginTop: spacing.xl,
    fontSize: 16,
    color: colors.grey,
  },
});

export default NotificationsScreen;